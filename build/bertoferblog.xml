<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Bertofer's logs]]></title><description><![CDATA[Thoughts, computers and development]]></description><link>https://blog.bertofer.me/</link><generator>Ghost 0.8</generator><lastBuildDate>Thu, 21 Jul 2016 22:43:41 GMT</lastBuildDate><atom:link href="https://blog.bertofer.me/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Deploying a Ghost blog with docker and Rancher part 2: Ghost blog]]></title><description><![CDATA[<ul>
<li>This is the second part of a 2-parts series, check <a href="https://blog.bertofer.me/2016/07/19/deploying-my-own-blog-part-1-setting-up-rancher-2/">here</a> for the part 1, on how to deploy the rancher server.</li>
</ul>

<p><a href="https://ghost.org/es/">Ghost</a> is the open source blogging platform that I will use to host this blog. It is open source, written in Node.js and comes with some interesting</p>]]></description><link>https://blog.bertofer.me/2016/07/21/deploying-a-ghost-blog-with-docker-and-rancher-part-2-ghost-blog/</link><guid isPermaLink="false">eb863182-ddc9-4f63-a8ce-6a020aadecdc</guid><category><![CDATA[devops]]></category><dc:creator><![CDATA[Alberto FernÃ¡ndez]]></dc:creator><pubDate>Thu, 21 Jul 2016 22:26:23 GMT</pubDate><content:encoded><![CDATA[<ul>
<li>This is the second part of a 2-parts series, check <a href="https://blog.bertofer.me/2016/07/19/deploying-my-own-blog-part-1-setting-up-rancher-2/">here</a> for the part 1, on how to deploy the rancher server.</li>
</ul>

<p><a href="https://ghost.org/es/">Ghost</a> is the open source blogging platform that I will use to host this blog. It is open source, written in Node.js and comes with some interesting features (Like Markdown editor which a developer would really appreciate, and other people too!).</p>

<p>First of all, we will launch a new DigitalOcean host to put the container on it. </p>

<h4 id="launchinganewhostthroughrancherserver">Launching a new host through rancher server</h4>

<p>In the Hosts menu, click Add Host. Rancher allow us to automatically launch hosts in different cloud providers like Digital Ocean or AWS. </p>

<p>Inside this add new host page, we select Digital Ocean as the cloud provider, and we select the specifications of the server we want to launch, as well as the API token generated by Digital Ocean. </p>

<p>(Look <a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2">here</a> for more info about creating API tokens and apps. Once you create your token, save it somewhere safe! As you will only be able to see it when creating it.)</p>

<p>In my case, a 1Gb RAM server will do for it.</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-19-at-17-04-57.png" alt=""></p>

<p>Once we do this, we will be able to see it in the list of hosts:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-22-48-25-1.png" alt=""></p>

<h4 id="creatingtheconfigfile">Creating the config file</h4>

<p>Ghost needs a config file where we will specify the database to connect to, our email address, etc... I have created a config file suitable for this blog, it should look something like this:</p>

<p>I will put this config inside the /data/ghost/ folder, that we will use as a volume to pass to the docker container.</p>

<pre><code class="language-javascript">var path = require('path');  
module.exports = {  
    production: {
        url: 'https://blog.bertofer.me',
        mail: {
             transport: 'SMTP',
             options: {
                 service: 'Mailgun',
                 auth: {
                     user: '******', 
                     pass: '******'  
                 }
             }
         },
        database: {
            client: 'sqlite3',
            connection: {
                filename: path.join(process.env.GHOST_CONTENT, '/data/ghost.db')
            },
            debug: false
        },

        server: {
            host: '127.0.0.1',
            port: '2368'
        },
        paths: {
            contentPath: path.join(process.env.GHOST_CONTENT, '/')
        }
    }
};
</code></pre>

<p>Brief description of the fields:</p>

<p><strong>url</strong>: URL that will be used to access the blog.</p>

<p><strong>mail</strong>: Configuration of the SMTP server to use when sending emails from the ghost platform. In my case, I have created a free <a href="https://mailgun.com">Mailgun</a> account for that purpose.</p>

<p><strong>database</strong>: The database configuration to use, along with some configuration about it. I have used SQLite, but it can be configured to use MySQL or Postgres.</p>

<p><strong>server</strong>: Information passed to server.listen</p>

<p><strong>paths</strong>: To specify different paths from the default ones. Currently only contentPath is accepted.</p>

<p>You can specify other environments like 'development' or 'testing' if you want to manage your blog with different environments for development or testing.</p>

<p>Checkout the <a href="https://github.com/TryGhost/Ghost/blob/master/config.example.js">config.example.js</a> in the Ghost repository for a complete description of all the fields and some environment examples.</p>

<h4 id="addingatheme">Adding a theme</h4>

<p>I will add a custom theme for the blograncher. The themes are located under ghost_dir/themes/, so we will create this folder and clone this <a href="https://github.com/h4t0n/odin">odin</a> theme into it.</p>

<pre><code>/data/ghost/themes# git clone https://github.com/h4t0n/odin odin
</code></pre>

<p>Now we are ready to deploy the ghost container!</p>

<h4 id="somerancherconcepts">Some rancher concepts</h4>

<p>Before launching the ghost container, I will explain some key concepts of rancher (and devops in general) that we will use later when deploying the actual blog:</p>

<p><strong>Services</strong>: A service is a set of containers that are using the same image and configuration. An example of a service could be a MySQL cluster. Services are easily scalable by specifying the number of containers to deploy.</p>

<p><strong>Stack</strong>: A Stack is a group of services that work together linked somehow to each other. An example of a Stack would be a complete web application, with MySQL, Redis, plus the App service itself.</p>

<h4 id="deployingtheblog">Deploying the blog</h4>

<p>In order to deploy our blog, we will first create a Stack for it, called ghost-blog. </p>

<p>Something great in the stacks, is that we can specify a docker-compose file to automatically start all the services. But for now, we will only need name and description.</p>

<p>After that, we click in Add Service on the top right of our stack.</p>

<p>In the following screen, there is a lot of configuration available to run the service.</p>

<p>This is the configuration I have used, leaving everything else blank or by default:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-11-05-49.png" alt="Name, description and image"></p>

<p>In the <strong>Command</strong> tab, just add one environment variable:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-10-55-13.png" alt="NODE_ENV"></p>

<p>And in <strong>Volumes</strong>, we add one volume to match where we stored our theme and config.js:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-10-55-35.png" alt="Volumes"></p>

<p>After we create the service, we should see it inside the stack. If everything worked well, we should see something like:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-14-14-15.png" alt="Service created"></p>

<p>Now the blog is running, but is in a container that is not accessible from the outside, as we didn't specify any port binding. We will do that from a rancher load balancer.</p>

<h4 id="deployingaloadbalancer">Deploying a load balancer</h4>

<p>To deploy the load balancer, first we will create a new stack, to put there some common services related to this host. For now we will only have the load balancer.</p>

<p>After creating a new stack, the load balancer is created by clicking on the arrow next to Add Service:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-19-at-20-39-33.png" alt="How to load balancer"></p>

<p>In the next page, we will put the following configuration (Inside targets, click advanced routing options to get this view).</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-18-42-13.png" alt="Load balancer configuration"></p>

<p>As we have configured it with SSL, it will ask us for the certificate to use. To add certificates to rancher, use Infrastructure -> Certificates.</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-18-49-19.png" alt="Select certificate"></p>

<p>After creating the load balancer, we will be able to access our blog from the outside!</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-19-at-21-04-05.png" alt="Blog is live"></p>

<h4 id="configuringaccount">Configuring account</h4>

<p>Next step is to configure our admin account for the blog. For that, we need to access your_blog.com/ghost/ and it will ask us to create it:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-19-at-21-04-29.png" alt="Pre-create account"></p>

<p>After creating the account, we are ready to start writing our blog:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-19-at-21-06-22.png" alt="Post-create account"></p>

<h4 id="extracreatingredirectforhttp">Extra: Creating redirect for http</h4>

<p>As for now, the blog is only accessible via https, but a http request will fire us an error as we don't have yet anything listening on port 80 to process the request.</p>

<p>We will use a tiny docker image created only for this purpose. You can find it on <a href="https://github.com/jamessharp/docker-nginx-https-redirect">Github</a> and <a href="https://hub.docker.com/r/jamessharp/docker-nginx-https-redirect/">Docker hub</a>.</p>

<p>I have used the common stack to put this service, with the following options:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-21-at-20-46-13.png" alt=""></p>

<p>And our blog is ready! Hope you have enjoyed these articles and feel free to leave any feedback on the comments below.</p>]]></content:encoded></item><item><title><![CDATA[Deploying a Ghost blog with docker and Rancher part 1: Setting up Rancher]]></title><description><![CDATA[<p>After thinking about it for some time, I have finally decided to build my own developer cloud to host some personal services and projects. One of this services will be a <a href="https://ghost.org/">Ghost</a> blog, so the first articles of that blog will be...how to set up that cloud and the</p>]]></description><link>https://blog.bertofer.me/2016/07/19/deploying-my-own-blog-part-1-setting-up-rancher-2/</link><guid isPermaLink="false">7c330b26-f48d-41d2-809c-8c3bfb7ee087</guid><category><![CDATA[devops]]></category><dc:creator><![CDATA[Alberto FernÃ¡ndez]]></dc:creator><pubDate>Tue, 19 Jul 2016 21:44:00 GMT</pubDate><content:encoded><![CDATA[<p>After thinking about it for some time, I have finally decided to build my own developer cloud to host some personal services and projects. One of this services will be a <a href="https://ghost.org/">Ghost</a> blog, so the first articles of that blog will be...how to set up that cloud and the blog!</p>

<p>As a <a href="https://www.docker.com/">docker</a> fan for devops tasks, I will use <a href="https://rancher.com">Rancher</a> to deploy and manage the cloud.</p>

<h4 id="whatisrancher">What is rancher?</h4>

<p>Rancher is a platform for running and managing containers. It comes with a lot of tools to make this easy and powerful. Load balancers, certificate management, grouping services into stacks for easier scalability, orchestration,  etc...</p>

<p>For containers, we need hosts aswell. Rancher also allow us to manage the hosts that will run our containers, allowing us to easily deploy the same services in different containers behind load balancers.</p>

<p>In this article I will cover how to set up the rancher server (from where we will manage all the hosts and contaienrs) behind SSL.</p>

<h4 id="installingrancher">Installing rancher</h4>

<p>First of all, we will create a /data/rancher folder, where we will store the MySQL data that rancher will use.</p>

<pre><code>mkdir -p /data/rancher  
</code></pre>

<p>Now, we will run the rancher container with the following command:</p>

<pre><code>docker run -d -v /data/rancher:/var/lib/mysql --restart=always -p 127.0.0.1:8080:8080 --name=rancher-server rancher/server  
</code></pre>

<p>With the option <em>-p 127.0.0.1:8080:8080</em> We are binding the internal port 8080 of the host to the container, so it's only accessible from the inside (What we want in our case, as it will be accessed by a nginx proxy).</p>

<p>We can try if it works trying to access the api:  </p>

<pre><code>curl 127.0.0.1:8080  
</code></pre>

<p>Should give us something like this:</p>

<pre><code>{"type":"collection","resourceType":"apiVersion","links":{"self":"http://127.0.0.1:8080/","latest":"http://127.0.0.1:8080/v1"},"createTypes":{},"actions":{},"data":[{"id":"v1","type":"apiVersion","links":{"self":"http://127.0.0.1:8080/v1"},"actions":{}}],"sortLinks":{},"pagination":null,"sort":null,"filters":{},"createDefaults":{}}
</code></pre>

<h4 id="configuringnginxwithssl">Configuring nginx with SSL</h4>

<p>Next thing will be to launch a nginx to proxy to our recently launched rancher server. We will create a simple nginx config, something like this:  </p>

<pre><code>worker_processes  5;  
error_log  /logs/error.log;  
pid        /logs/nginx.pid;

events {  
  worker_connections  4096;  ## Default: 1024
}

http {  
    upstream rancher {
        server rancher-server:8080;
    }

    server {
        listen 443 ssl;
        server_name **********;
       ssl_certificate /certs/*********;
       ssl_certificate_key /certs/**********;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://rancher;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 900s;
        }
    }

    server {
        listen 80;
        server_name ***********;
        return 301 https://$server_name$request_uri;
    }
}
</code></pre>

<p>With this nginx.conf created in our server, we will launch the nginx container sharing this file as a volume. We will also share the logs folder used and the certificates one. All of it will depend on how you have it organized inside your server.</p>

<p>Notice the --link=rancher-server to link it to the rancher-server container. For doing that, we needed to launch the rancher server container with the --name=rancher-server option.</p>

<pre><code>docker run --name nginx --link=rancher-server \  
    -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
    -v /data/nginx/logs:/logs/ \
    -v /home/nginx/:/certs/:ro \
    -p 443:443 -p 80:80 \
    -d nginx
</code></pre>

<p>Now, we are able to access our rancher server on the server_name that we specified on the nginx conf!</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-20-at-10-42-57.png" alt="Rancher view"></p>

<p>We can notice the alert in "ADMIN". It says we don't have configured access control.</p>

<h4 id="configuringaccesscontrol">Configuring access control</h4>

<p><strong>IMPORTANT!</strong> Rancher doesn't come with any access control configured by default, <strong>so it will be accessible from the outside and anyone with access to it will be able to control it</strong>. In order to secure it, we will configure the access control by github.</p>

<p>To do that, we need to create a Github application. We go to our github account -> Settings -> OAuth applications -> Developer applications, or following this link:  </p>

<pre><code>https://github.com/settings/applications/new  
</code></pre>

<p>The values that we need to specify in our github account are specified in Rancher on the Github access control panel:</p>

<p><img src="http://res.cloudinary.com/bertofer-blog/image/upload/v1469009969/article1/Screen_Shot_2016-07-20_at_10.51.18.png" alt="Github data"></p>

<p>After creating the application in github, we copy the Client ID and the Client token into the rancher, and we Authenticate with Github to test and enable the access control. If everything went well, we should see the following page:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-16-at-19-05-31.png" alt="Github access control enabled"></p>

<p>Now, if we try to enter rancher from the outside, it will require us to login with Github.</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-20-at-11-31-15.png" alt=""></p>

<p>That's it! Now we have a secured rancher to manage our own cloud services.</p>

<h4 id="aboutusingthishostasrancheragent">About using this host as rancher agent</h4>

<p>You could have noticed by now that this host where we have the rancher server doesn't appear as a host to use to deploy containers. This is because we need to run a rancher/agent to be able to do so. But after some testing, I have decided not to add it. </p>

<p>The reason why, is because I want to use rancher load balancer for the upcoming services of this cloud, but in this server we already have a nginx listening on 80 and 443, so we won't be able to configure a load balancer here.</p>

<p>Also, if we try to modify the nginx and rerun it again, we may have the problem of not being able to access the rancher server anymore. I have come to the conclusion that it's not a very good practice to use the same host where the control tower is as a host where containers will be deployed.</p>

<p>I think that in a production environment, the rancher server should be somewhere inside the internal cloud / onsite of the company, to control from the inside the public hosts deployed in the cloud.</p>

<p>If you still want to add this host as a rancher agent to manage your docker containers, there is how:</p>

<h4 id="extraaddingthishostasarancheragent">Extra: Adding this host as a Rancher agent</h4>

<p>Go to Infrastructure > hosts, and click in new host. Then we see the following page:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-16-at-19-17-04.png" alt=""></p>

<p>As we already have this host created, we click custom and we follow the instructions. We get a command similar to:</p>

<pre><code>docker run -e CATTLE_AGENT_IP="********" -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher rancher/agent:v1.0.2 http://*************
</code></pre>

<p>Don't forget to add the Public IP of our host to the field of the form, it will automatically add the CATTLE_AGENT_IP variable for us in the command. This is needed when we are adding the same host the rancher/server is on.</p>

<p>After running this, we should see our host in the list of running hosts:</p>

<p><img src="https://blog.bertofer.me/content/images/2016/07/Screen-Shot-2016-07-16-at-20-47-40.png" alt="Rancher server and host"></p>

<p>And we're finished! Now, we can click on the name of the host to see some monitoring graphics of it and manage it, or deploy other containers on it.</p>

<p>You can follow with the part 2 <a href="https://blog.bertofer.me/2016/07/21/deploying-a-ghost-blog-with-docker-and-rancher-part-2-ghost-blog/">here</a>.</p>

<h4 id="references">References</h4>

<p><a href="http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/basic-ssl-config/">http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/basic-ssl-config/</a></p>

<p><a href="http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/#bind-mount-mysql-volume">http://docs.rancher.com/rancher/latest/en/installing-rancher/installing-server/#bind-mount-mysql-volume</a></p>]]></content:encoded></item></channel></rss>